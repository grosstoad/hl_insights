{"ast":null,"code":"var _jsxFileName = \"/Users/sarah/Documents/Programming Projects/home-loan-visualiser/home-loan-visualizer/src/components/LoanChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LoanChart = ({\n  extraPayment\n}) => {\n  _s();\n  const [scheduleData, setScheduleData] = useState([]);\n  const [scenarioData, setScenarioData] = useState([]);\n  const [error, setError] = useState(null);\n  const monthsToYears = months => Math.floor(months / 12);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const result = await axios.post('http://127.0.0.1:5000/schedule', {\n          balance: 300000,\n          // example values\n          interest_rate: 3.5,\n          monthly_payment: 1500,\n          term: 360\n        });\n        setScheduleData(result.data);\n      } catch (err) {\n        console.error(err);\n        setError('Failed to fetch data from server');\n      }\n    };\n    fetchData();\n  }, []);\n  useEffect(() => {\n    const fetchUpdatedData = async () => {\n      try {\n        const result = await axios.post('http://127.0.0.1:5000/savings', {\n          balance: 300000,\n          // example values\n          interest_rate: 3.5,\n          monthly_payment: 1500,\n          extra_payment: parseFloat(extraPayment),\n          term: 360\n        });\n        setScenarioData(result.data.schedule);\n      } catch (err) {\n        console.error(err);\n        setError('Failed to fetch data from server');\n      }\n    };\n    if (extraPayment > 0) {\n      fetchUpdatedData();\n    } else {\n      setScenarioData([]);\n    }\n  }, [extraPayment]);\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 16\n    }, this);\n  }\n  const formatTooltip = value => `$${value.toFixed(2)}`;\n  const combinedData = scheduleData.map((item, index) => {\n    var _scenarioData$index;\n    return {\n      month: item.month,\n      scheduled_balance: item.balance,\n      scenario_balance: ((_scenarioData$index = scenarioData[index]) === null || _scenarioData$index === void 0 ? void 0 : _scenarioData$index.balance) || item.balance,\n      principal: item.principal,\n      interest: item.interest\n    };\n  });\n  return /*#__PURE__*/_jsxDEV(LineChart, {\n    width: 800,\n    height: 400,\n    data: combinedData,\n    children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n      strokeDasharray: \"3 3\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n      dataKey: \"month\",\n      tickFormatter: monthsToYears,\n      label: {\n        value: 'Years',\n        position: 'insideBottomRight',\n        offset: -5\n      },\n      domain: [0, 'dataMax']\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n      formatter: formatTooltip\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      type: \"monotone\",\n      dataKey: \"scheduled_balance\",\n      name: \"Scheduled Balance\",\n      stroke: \"#8884d8\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      type: \"monotone\",\n      dataKey: \"scenario_balance\",\n      name: \"Scenario Balance\",\n      stroke: \"#82ca9d\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 9\n  }, this);\n};\n_s(LoanChart, \"1GQevj3F4N1jUugTmwAW3R/s8EE=\");\n_c = LoanChart;\nexport default LoanChart;\nvar _c;\n$RefreshReg$(_c, \"LoanChart\");","map":{"version":3,"names":["React","useEffect","useState","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","axios","jsxDEV","_jsxDEV","LoanChart","extraPayment","_s","scheduleData","setScheduleData","scenarioData","setScenarioData","error","setError","monthsToYears","months","Math","floor","fetchData","result","post","balance","interest_rate","monthly_payment","term","data","err","console","fetchUpdatedData","extra_payment","parseFloat","schedule","children","fileName","_jsxFileName","lineNumber","columnNumber","formatTooltip","value","toFixed","combinedData","map","item","index","_scenarioData$index","month","scheduled_balance","scenario_balance","principal","interest","width","height","strokeDasharray","dataKey","tickFormatter","label","position","offset","domain","formatter","type","name","stroke","_c","$RefreshReg$"],"sources":["/Users/sarah/Documents/Programming Projects/home-loan-visualiser/home-loan-visualizer/src/components/LoanChart.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\nimport axios from 'axios';\n\nconst LoanChart = ({ extraPayment }) => {\n    const [scheduleData, setScheduleData] = useState([]);\n    const [scenarioData, setScenarioData] = useState([]);\n    const [error, setError] = useState(null);\n\n    const monthsToYears = (months) => Math.floor(months / 12);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const result = await axios.post('http://127.0.0.1:5000/schedule', {\n                    balance: 300000,  // example values\n                    interest_rate: 3.5,\n                    monthly_payment: 1500,\n                    term: 360\n                });\n                setScheduleData(result.data);\n            } catch (err) {\n                console.error(err);\n                setError('Failed to fetch data from server');\n            }\n        };\n        fetchData();\n    }, []);\n\n    useEffect(() => {\n        const fetchUpdatedData = async () => {\n            try {\n                const result = await axios.post('http://127.0.0.1:5000/savings', {\n                    balance: 300000,  // example values\n                    interest_rate: 3.5,\n                    monthly_payment: 1500,\n                    extra_payment: parseFloat(extraPayment),\n                    term: 360\n                });\n                setScenarioData(result.data.schedule);\n            } catch (err) {\n                console.error(err);\n                setError('Failed to fetch data from server');\n            }\n        };\n\n        if (extraPayment > 0) {\n            fetchUpdatedData();\n        } else {\n            setScenarioData([]);\n        }\n    }, [extraPayment]);\n\n    if (error) {\n        return <div>Error: {error}</div>;\n    }\n\n    const formatTooltip = (value) => `$${value.toFixed(2)}`;\n\n    const combinedData = scheduleData.map((item, index) => {\n        return {\n            month: item.month,\n            scheduled_balance: item.balance,\n            scenario_balance: scenarioData[index]?.balance || item.balance,\n            principal: item.principal,\n            interest: item.interest,\n        };\n    });\n\n    return (\n        <LineChart width={800} height={400} data={combinedData}>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"month\" tickFormatter={monthsToYears} label={{ value: 'Years', position: 'insideBottomRight', offset: -5 }} domain={[0, 'dataMax']} />\n            <YAxis />\n            <Tooltip formatter={formatTooltip} />\n            <Legend />\n            <Line type=\"monotone\" dataKey=\"scheduled_balance\" name=\"Scheduled Balance\" stroke=\"#8884d8\" />\n            <Line type=\"monotone\" dataKey=\"scenario_balance\" name=\"Scenario Balance\" stroke=\"#82ca9d\" />\n        </LineChart>\n    );\n};\n\nexport default LoanChart;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}